//Для заданого зв’язного графа знайти всі мости. Граф представити за допомогою матриці суміжності.
// Мостом в графі називається ребро, за відсутності якого граф перестає бути зв’язним.
#include <iostream>
#include <queue>

using namespace std;


int ConnectedGraph[100][100], d[100];
    queue<int> object;

int main() {
    int n, m, FrontLink;
    cout << "Введіть розмір матриці суміжності для заданого зв'язного графа (к-сть рядків та стовпців): ";
    cin >> n;
    cin >> m;
    m--;
    cout << "Введіть матрицю суміжності для заданого зв'язного графа: " << endl;
    for ( int i = 0; i < n; i++ ) {
        for ( int j = 0; j < m; j++ ) {
            cout << "Елемент матриці за індексом [" << i << "][" << j << "]: ";
            cin >> ConnectedGraph[i][j];
        }
    }

    for ( int i = 0; i < n; i++ ) {
        d[i] = -1;
    }

    object.push(m); //додає елемент в кінець
    d[m] = 0;

    do {
        object.pop(); //видаляє елемент з початку
        FrontLink = object.front(); //вертає посилання на перший елемент на початку
    }
    while (!(object.empty())); //перевіряє чи є q пустим
        for ( int i = 0; i < n; i++ ) {
            if ( ConnectedGraph[FrontLink][i] && d[i] == -1 ) {
                object.push(i);
                d[i]+= 1;
            }
        }
    cout << "Результат виконання програми: " << endl;
    for( int i = 0; i < n; i ++ ) {
        cout << d[i] << " ";
    }
}

/*
4*4
0 1 1 0
1 0 1 1
1 1 0 0
0 1 0 0


7*7
0 1 0 1 0 0 0
1 0 1 1 0 0 0
0 1 0 1 0 0 0
1 1 1 0 1 0 0
0 0 0 1 0 1 1
0 0 0 0 1 0 1
0 0 0 0 1 1 0
*/
